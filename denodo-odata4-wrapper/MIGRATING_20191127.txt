MIGRATING CUSTOM WRAPPERS TO VERSIONS INCLUDING DATASOURCE-LEVEL CONFIGURATION
==============================================================================

Recent improvements in the custom wrapper API in Virtual DataPort 7.0 update
20190903 allow for the use of a recently added feature in the VDP engine that
allows configuration parameters in Custom Wrapper to be separated between the
Data Source and the Wrapper (Base View) levels.

We recommend fully reading this document before taking any steps, in order to
make sure that the required migration process is completely understood. We also
recommend that this migration process be always done in development/staging
servers, and only the successful results of the migration process be pushed
to production.

Making use of the above-mentioned functionality, recent versions of this
wrapper divide configuration parameters in the way that most closely
resembles the configuration of JDBC data sources and base views:

   * In general, server and database connectivity parameters (host, port,
     database, instance, protocols, credentials, SSL...) are now configured
     at the Data Source level.

   * In general, connectivity parameters referring to the specific data
     set being accessed will remain at the Wrapper (Base View) level: table,
     collection, file path, etc.

When migrating from a version of the custom wrapper that does not divide its
configuration in this way, the new wrapper version should be installed into
VDP in the usual way (using Extensions -> Extension Management).

Once installed, all existing base views should continue working as before
while no modifications are made to them.

But note that the mere installation of the new version of the wrapper does not
update the structure of the underlying metadata, and therefore the existing
affected structures will not be considered to be in a properly future-proof
state until their metadata is explicitly restructured.

The following steps should be taken in order to perform such restructuration
of the metadata.


# Step 1: Verifying Data Source - Base View relationships

The first step required for the migration of metadata is to verify that only
base views that share the same data-source-level configuration (host,
server, credentials, etc. depending on the specific wrapper), are actually
linked to a single data source artifact in VDP. This is because all base
views depending on the same data source configuration should have a
configuration that only differs in their base-view-level configuration
parameters (table, collection, etc.).

Note that, in order to perform this verification, once the wrapper is
installed --and due to the change in the structure of the base views'
configuration-- you will need to use the views' "VQL" details window
label in order to check all the previous view configuration parameter
values. This window will not show credentials in plain.

So base views that do not share a common set of data-source-level
configuration parameters will require the creation of new data source
artifacts in VDP, and the re-creation of those base views linked to these
new data sources. There will be no migration possible for those structures,
but rather a re-creation.


# Step 2: Migrating the Data Source metadata

Focusing therefore on the restructuring of the artifacts that remain
linked to previously-existing data source artifacts, those data sources
will be the first thing to be modified from the VDP administration tool.

Once the editor is open, admins will be presented with a form including
empty-valued fields for all the data-source-level configuration arguments
(host, port, credentials...). These fields should be filled in with the
same values that would have been in use until that moment for those same
configuration items but at the base-view-level (and which, as explained
above, are now only accessible at the base views' "VQL" details window
label).

Once the form is completed, pressing "Save" will write the new data source
metadata, now with the correct structure.


# Step 3: Migrating the Base Views metadata

Once the data source's configuration has been updated, we need to iterate
through all the base views depending on that data source and edit them
("Edit" -> "Source Refresh"), making sure the new configuration form
contains the correct collection and schema data (previous values will
be pre-filled) and saving the base view by clicking "OK" on the form
and then "Save" on the base view configuration tab.

NOTE that, if the schema of the base view dynamically depends on queries
performed on the data source's data at the moment of creating the base
view, and the structure of these data has changed from the moment of the
creation of the original view, then after saving the new base view
configuration the new schema for the view could differ from the original.


After performing these steps, the VDP metadata corresponding to all data
sources and base views linked to the affected wrapper should have the
proper structure, which can be checked at the "VQL" section of the
base views, additionally checking the "Show Dependencies" option
in order to compare the base view's and data source's metadata
structures.


### SOLUTION MANAGER ###

When configuration properties for the different environments are
managed from the Denodo Solution Manager, some additional steps
need to be taken in order to properly migrate the updates in metadata
structures across the environments.

These steps will be explained based on an example where we have a
Development environment as origin and a Test environment as target.

# Step 1: Export new properties from VDP

From the VDP Admin Tool, we have to export the configuration properties we
just re-structured. Right click on the database and select the "Export..."
option. Then, we need to make sure that we have the "Export environment
specific properties separately" checked and export the elements. This will
generate a .vql file and a .properties file.

# Step 2: Import properties in the Solution Manager

Assuming that the .properties file generated in the previous step contains the
parameters used in the Development environment, we can access this environment
in the Solution Manager and replace the old properties. Just for safety
reasons, the old ones should be exported and backed up before importing the
new ones.

Once we've done this backup, delete all the properties related with this
elements and import the generated .properties file. Now, we will have separated
data-source-level parameters and base-view-level parameters.

# Step 3: Adapt the target environment with the new properties

Now, before we can deploy any revisions from the Development to the Test
environment (or whatever the target environment is), we will have to adapt the
properties of the Test environment. As before, we can do a backup of the
properties by clicking on the export option just for security.

Now we need, once again, the properties generated in step #1. We may want
to use a text editor to do the replacements in property values according
to the needs of the target environment. Once we have modified the properties
file, we can now import these new properties. As we may have done a backup
of the old properties, for clarity purposes, we may want to delete first
these old properties and then import the new file. Other choice would be
importing the new file and, after checking that everything still works,
removing the old properties. Note that these removals are intended in order
to avoid keeping properties that are no longer useful for the Custom Wrapper,
but removals are not mandatory.


